#title:Json Book
#author:mastung(mastung@gmail.com)
#author:wendal(wendal1985@gmail.com)
#index:0,1
--------------------------------------------------------------------------------------------------------
目标

	* 通过简单的toJson 和fromJson能完成绝大部分的互转工作, 不再需要额外的配置.
	* 能够提供模板, 容易的更改Json的展现, 和反向的Java Object生成
	* 适用于任何的Java对象, 包括基本类型
	* 支持JDK1.5+
--------------------------------------------------------------------------------------------------------
简单开始

	Java转换成Json:
	{{{<JAVA>
	Json.toJson(6.5); ===> 输出: 6.5
	Json.toJson("json"); ===> 输出: "json"
	Json.toJson(new int[0]); ===> 输出: []
	}}}
	
	Json转换成Java:
	{{{<JAVA>
	int intValue = Json.fromJson(Lang.inr("65"));
	float floatValue = Json.fromJson(float.class, Lang.inr("65"));
	int[] intArray = Json.fromJson(int[].class, Lang.inr("[65]"));
	}}}
--------------------------------------------------------------------------------------------------------	
对Map的操作
	
	Java转换成Json:
	{{{<JAVA>
	Map<String,Object> map = new HashMap<String, Object>();
	map.put("name", "Peter");
	map.put("age", 21);
	map.put("friends", null);
	System.out.println(Json.toJson(map));
	}}}
	这个时候会输出成:
	{{{<JSON>
	{
		age :21,
		name :"Peter"
	}
	}}}
	会自动忽略掉值为空的字段.
	
	Json转换成Java:
	{{{<JAVA>
	String json = "{age :21,name :\"Peter\"}";
	map = Json.fromJson(HashMap.class, Lang.inr(json));
	}}}
--------------------------------------------------------------------------------------------------------	
对Bean的操作

	设计这样的类:
	{{{
	public static class UserObject {
		public static enum Sex {
			Male, Female
		};
		private String name;
		private int age;
		private Sex sex;
		private Date birthday;
		private UserObject bestFriend;
	//省略Getter/setter
	}
	}}}
	Java转换成Json:
	{{{<JAVA>
	UserObject peter = new UserObject();
	peter.setName("Peter");
	peter.setAge(22);
	peter.setSex(UserObject.Sex.Male);
	System.out.println(Json.toJson(peter));
	}}}
	这个时候会输出成:
	{{{<JSON>
	{
		name :"Peter",
		age :22,
		sex :"Male"
	}
	}}}
	会自动忽略掉值没有赋值的字段birthday和bestFriend.

	更进一步, 我们来看看关联的情况, 在以上代码的基础上面:
	{{{<JAVA>
	amy.setName("Amy");
	amy.setAge(21);
	amy.setSex(UserObject.Sex.Female);
	amy.setBirthday(new Date());
	amy.setBestFriend(peter);
	System.out.println(Json.toJson(amy));
	}}}
	这个时候会输出成:
	{{{<JSON>
	{
		name :"Amy",
		age :21,
		sex :"Female",
		birthday :"2009-04-11 21:28:59",
		bestFriend :{
		name :"Peter",
		age :22,
		sex :"Male"
		}
	}
	}}}
	关联对象的关联会被自动探知.
	
	注意:如果关联里面存在循环关联,在内部对象的关联属性里面会被置空. 如:
	{{{<JAVA>
	peter.setBestFriend(amy);
	System.out.println(Json.toJson(peter));
	}}}
	这个时候输出:
	{{{
	{
	name :"Amy",
	age :21,
	sex :"Female",
	birthday :"2009-04-11 21:28:59",
	bestFriend :{
		name :"Peter",
		age :22,
		sex :"Male",
		bestFriend :null
		}
	}
	}}}
--------------------------------------------------------------------------------------------------------
更进一步

	还可以定制JsonFormat的属性来控制输出内容. 如是否忽略null字段, 是否压缩等等.
	
	JsonFormat默认提供了3种初始对象:
		* compact() : 压缩并忽略null字段
		* nice() : 不压缩;字段名不加引号;忽略null字段
		* full() : 不压缩;字段名加引号;不忽略null字段
		
--------------------------------------------------------------------------------------------------------	
对Json的过滤.
	
	在使用JSON的过程中不管是序列化也好, 还是反序列化也好, 或多或少都会过滤一部分数据. 
	同样的, 要过滤, 需要使用JsonFormat. 具体使用如下:
	
	序列化:
	{{{<JAVA>
	JsonFormat format = new JsonFormat();
	List<String> mates = new ArrayList<String>();
    mates.add("name");
	format.setMates(mates);
	format.setFilterType(FilterType.include);
	String s = Json.toJson(a, format);
	}}}
	反序列化:
	{{{<JAVA>
	JsonFormat format = new JsonFormat();
	List<String> mates = new ArrayList<String>();
    mates.add("name");
	format.setMates(mates);
	format.setFilterType(FilterType.include);
	Json.fromJson(Streams.fileInr("org/nutz/json/person.txt"), format);
	}}}
	
	可以发现序列化, 反序列化的过滤使用方法完全相同. 
	mates规则:
	1. 要定义过滤或是包含, 都直接以对象关联的方式写出, 如: user.name, 
	2. 不区分 Map, List 全部都使用 1 中的形式. 这里指的 Map, List 是指 JsonCompile 转换的中间对象, 也可以理解成JSON的数组, 而非 JAVA 属性中的 Map, List. 注意概念
	3. 包含还是排除, 以 FilterType 属性做标识, FilterType.include 为包含, FilterType.exclude 为排除.
	4. 同一时间只支持一种关系.
	
--------------------------------------------------------------------------------------------------------	
JSON 结构转换(其实是Map,List结构, 不一定非要JSON转换的)
	现在JSON应用满广的, 但是很多时候都需要去调整其结构, 遇到这种情况, 好多时候都是手工去处理, 但是这样的活一多, 工作量就大, 麻烦呀~~~俗话说程序员上辈子都是懒鬼, 能用程序实现的就让程序来实现吧. 闲话就不说了.
	要进行这样的转换需要预先配置一个对应关系的配置, 具体的配置关系说明如下: 

	1. 使用原JSON一样的结构 
	2. 有数组的, 只写第一个元素的结构 
	3. 原结构中的值, 以字符串或字符串数组做为目标结构的对应关系 
	4. 对应关系可以为数组 
	5. 有数组的, 目标结构以key[].abc来代替数组 
	6. 原结构数组层次强制限定一致, 目标结构中'[]'的索引按原结构中出现先后顺序进行匹配. 
	7. 如果原结果不存在, 那默认为0 
	8. 未在模板中申明的不做转换 
	
	例1:
	{{{<JSON>
	{
		"age":"user.年龄",
		"name":["user.name", "user.姓名"]
	}
	}}}
	例2(原json:[{"name":"nutz"},{"name":"juqkai"}]):
	{{{<JSON>
	[{
		"name":"[].姓名"
	}]
	}}}
	例3:
	{{{<JSON>
	{
		users:[
			{
				"name":["people[].name", "users[].name"],
				"age":"users[].name"
			}
		]
	}
	}}}
	例4:
	{{{<JSON>
	{
		"searchResult" : {
			"commodities" : [
					{
						"id" : "1234",
						"name" : "nutz"
					},{
						"id":"5678",
						"name":"那些年,我们一起追的女孩"
					}]
		}
	}
	}}}
	这是一个一般的JSON.但是真的很丑, 而且也不是我们需要的, 也没法使用Objs.convert(Object, Type)来自动注入到对象中, 所以需要将它转换成其它形式的. 看下面的:
	{{{<JSON>
	{
		"searchResult" : {
			"commodities" : [
					{
						"id" : "product[].id",
						"name" : "product[].name"
					}]
		}
	}
	}}}
	这是一个JSON 格式的配置, 其结构与原始JSON的结构相同, 如果某个值你不需要, 那么在这个结构中就不写出来, 而每个 key 的 Value 表示结构转换后 key 对就值的新路径, 上面个配置转换后的结果:
	{{{<JSON>
	{
		"product":[{
			"id":"1234",
			"name":"nutz"
		},{
			"id":"5678",
			"name":"那些年,我们一起追的女孩"
		}]
	}
	}}}
	当然, 一个 KEY 也可以转换成多个路径, 如 "id" : "product[].id" 改成 "id" : ["product[].id", "product[].key"], 那么在上面将会产生多个路径. 如:
	{{{<JSON>
	{
		"product":[{
			"id":"1234",
			"key":"1234",
			"name":"nutz"
		},{
			"id":"5678",
			"key":"5678",
			"name":"那些年,我们一起追的女孩"
		}]
	}
	}}}
	可能你已经发现了, 没错, 支持数组, 但是使用上有点不一样, 使用'[]'后缀来表明该key是一个数组, 同时该数组的索引将会按原始结构数组出现顺序来取, 如果没有, 则默认为0. 如 product[].id表明product数组下一个对象的id属性值. user[].order[].product[].id 有三层数组, 而原结构中只有一层, 所以除了第一个user[]会取到值以外, 后面两层都会是'0', 所以不推荐目标路径数组数少于原数组数. 最好是一一对应
	
	

--------------------------------------------------------------------------------------------------------	
Map, List结构访问.
	Json.fromJson如果不传递转换类型的话, 它返回的是一个Map, List结构的数据, 如果要对它进行操作, 需要人工去取值, 转换, 操作麻烦, 用着也不爽. 所以有了这个功能.
	Objs.cell(obj, path);
	其中 obj 为Map, List结构的对象, path就是你要访问的路径, 如: 
	{{{<json>
	{
		"users":[{
			name:"1"
		}, {
			name:"2"
		}]
	}
	}}}
	要得到某个值, 那就使用 users[0].name 就可以了.
	


